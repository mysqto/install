#!/usr/bin/env bash

installed=()

nopassword=(
    apt
    apt-get
    aptitude
    dpkg-reconfigure
    dpkg-divert
    dpkg-preconfigure
    dpkg-query
    dpkg-split
    dpkg-statoverride
    dpkg-trigger
    dpkg-deb
    dpkg
    do-release-upgrade
    systemctl
    service
    reboot
    shutdown
    halt
    poweroff
    init
    ls
    grep
    uname
    make
)

function warn() {
    echo -e "\033[1;33m${*}\033[0m"
}

function error() {
    echo -e "\033[1;31m${*}\033[0m"
    exit 1
}

function _installed() {
    command -v "$1" &>/dev/null
}

function _install_fish() {
    local distro="$1"
    if [ "$distro" == "ubuntu" ]; then
        apt install -y software-properties-common
        add-apt-repository -y ppa:fish-shell/release-3
    elif [ "$distro" == "debian" ]; then
        debian_release="$(lsb_release -rs 2>/dev/null)"
        latest_debian_stable_version=$(curl -sL https://www.debian.org/releases/stable/ | grep -oP 'Debian \K\d+' | head -n1 2>/dev/null)
        [ -z "$latest_debian_stable_version" ] && error "failed to get debian release version"
        ((debian_release <= latest_debian_stable_version)) && {
            echo "deb http://download.opensuse.org/repositories/shells:/fish:/release:/3/Debian_$debian_release/ /" |
                tee /etc/apt/sources.list.d/shells:fish:release:3.list
            curl -fsSL "https://download.opensuse.org/repositories/shells:fish:release:3/Debian_$debian_release/Release.key" |
                gpg --dearmor | tee /etc/apt/trusted.gpg.d/shells_fish_release_3.gpg >/dev/null
            apt -y update
        } || warn "current debian release $debian_release is not stable, use default version of fish"

    fi
    apt -y --no-install-recommends install fish
}

function _install_neofetch() {
    # install neofetch
    pushd /tmp >>/dev/null 2>&1 || exit
    rm -rf neofetch
    git clone https://github.com/dylanaraps/neofetch
    if [ -d neofetch ]; then
        pushd neofetch >>/dev/null 2>&1 || exit
        make install
        popd >>/dev/null 2>&1 || exit
    fi
    popd >>/dev/null 2>&1 || exit
}

function _install_im() {
    curl -sL install.lol/im -o /usr/bin/im && chmod +x /usr/bin/im
    [ -f /usr/bin/im ] && installed+=("/usr/bin/im")
}

function _enable_bbr() {
    if ! grep -q "bbr" /etc/sysctl.conf; then
        echo "net.core.default_qdisc=fq" >>/etc/sysctl.conf
        echo "net.ipv4.tcp_congestion_control=bbr" >>/etc/sysctl.conf
    fi
    sysctl -p
}

function _enable_backports() {
    echo "Enabling backports for Debian"
    debian_codename="$(lsb_release -cs 2>/dev/null)"
    #use backports for debian
    apt_source_list="/etc/apt/sources.list"
    grep -q "$debian_codename-backports" "$apt_source_list" || cat >>"$apt_source_list" <<EOF
deb http://deb.debian.org/debian $debian_codename-backports main
deb-src http://deb.debian.org/debian $debian_codename-backports main
EOF
    backports_pirority_file="/etc/apt/preferences.d/backports"
    [ -f "$backports_pirority_file" ] && rm -f "$backports_pirority_file"
    cat >>"$backports_pirority_file" <<EOF
Package: *
Pin: release a=$debian_codename-backports
Pin-Priority: 900
EOF
}

function _enable_ipv6() {
    if=$(ip -6 route | grep default | awk '{print $5}')
    if [ -z "$if" ]; then
        warn "ipv6_dchp is true but no default ipv6 route found"
    elif grep -q "iface $if inet6 dhcp" /etc/network/interfaces; then
        warn "ipv6_dchp is true but ipv6 dhcp is already enabled"
    else
        echo "iface $if inet6 dhcp" >>/etc/network/interfaces
    fi
}

function _enable_socat() {
    apt -y --no-install-recommends install socat
    if ! _installed socat; then
        error "socat installation failed"
    fi

    curl -sL install.lol/socat/socat.service -o /lib/systemd/system/socat.service
    curl -sL install.lol/socat/socat -o /etc/socat && chmod +x /etc/socat
    curl -sL install.lol/socat/socatrc -o /etc/socatrc

    [ ! -f /etc/socatrc ] && error "socatrc installation failed"
    [ ! -f /etc/socat ] && error "socat installation failed"
    [ ! -f /lib/systemd/system/socat.service ] && error "socat.service installation failed"

    systemctl enable socat.service
}

function _config_ssh() {
    [ $# -ne 2 ] && warn "config_ssh requires 2 arguments" && return 1
    username="$1"
    ssh_authorized_keys="$2"
    [ -d "/home/$username/.ssh" ] && rm -rf "/home/$username/.ssh"
    mkdir -p "/home/$username/.ssh"

    if grep -q "$ssh_authorized_keys" "/home/$username/.ssh/authorized_keys"; then
        warn "ssh_authorized_keys already exists"
    else
        echo "$ssh_authorized_keys" >>"/home/$username/.ssh/authorized_keys"
    fi

    chown -R "$username:$username" "/home/$username/.ssh"
    chmod 700 /home/"$username"/.ssh
    chmod 600 /home/"$username"/.ssh/authorized_keys

    # update sshd config
    sed -ri 's/^#?PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config
    # disable root login
    sed -ri 's/^#?PermitRootLogin.*/PermitRootLogin no/g' /etc/ssh/sshd_config
}

function _create_user() {
    [ $# -ne 1 ] && warn "create_user requires username" && return 1
    username="$1"
    # create user if not exists
    if ! id -u "$username" >/dev/null 2>&1; then
        group_id=1024
        while id -g "$group_id" >/dev/null 2>&1; do
            group_id=$((group_id + 1))
        done
        groupadd -g "$group_id" "$username"

        user_id=1024
        while id -u "$user_id" >/dev/null 2>&1; do
            user_id=$((user_id + 1))
        done

        shell="$(which fish)"
        [ -z "$shell" ] && shell="$(which bash)"
        useradd -m -u "$user_id" -g "$group_id" -s "$shell" -G sudo "$username"
    fi
}

function _config_fish() {
    [ $# -ne 1 ] && warn "config_fish requires username" && return 1
    username="$1"
    if ! _installed fish; then
        _install_fish "$distro"
    fi

    fish_shell="$(which fish 2>/dev/null)"
    current_shell="$(getent passwd "$username" | cut -d: -f7)"

    [ -n "$fish_shell" ] && [ "$current_shell" != "$fish_shell" ] && {
        chsh -s "$fish_shell" "$username"
        # install fisher
        su - "$username" -c 'set -U fish_user_paths /sbin'
        su - "$username" -c 'curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher && fisher install mysqto/flash'
        echo "wait 5 seconds for fisher to install plugins" && sleep 5
    }
}

function _config_sudo() {
    [ $# -ne 2 ] && warn "config_sudo requires username and sudo_without_password" && return 1
    username="$1"
    sudo_without_password="$2"
    [ -f "/etc/sudoers.d/$username" ] && rm -f "/etc/sudoers.d/$username"

    if [ "$sudo_without_password" = true ]; then
        echo "$username ALL=(ALL) NOPASSWD: ALL" >>"/etc/sudoers.d/$username"
    else
        for cmd in "${nopassword[@]}"; do
            cmd_path="$(which "$cmd")"
            if [ -n "$cmd_path" ]; then
                echo "$username ALL=(ALL) NOPASSWD: $cmd_path" >>"/etc/sudoers.d/$username"
            fi
        done

        for cmd in "${installed[@]}"; do
            cmd_path="$(which "$cmd")"
            if [ -n "$cmd_path" ]; then
                echo "$username ALL=(ALL) NOPASSWD: $cmd_path" >>"/etc/sudoers.d/$username"
            fi
        done
    fi
}

function _enable_byobu() {
    [ $# -ne 1 ] && warn "enable_byobu requires username" && return 1
    username="$1"
    if ! _installed byobu; then
        apt -y --no-install-recommends install byobu
    fi

    su - "$username" -c 'byobu-enable'
}

distro="$(lsb_release -is 2>/dev/null)"

[ -z "$distro" ] && distro="$(cat /etc/*-release 2>/dev/null | grep -Eo 'ID=\w+' | cut -d'=' -f2 | head -n1)"

[ -z "$distro" ] && distro="$(cat /etc/*-release 2>/dev/null | grep -Eo 'ID_LIKE=\w+' | cut -d'=' -f2 | head -n1)"

[ -z "$distro" ] && error "Could not detect distro"

distro="$(echo "$distro" | tr '[:upper:]' '[:lower:]')"

[ "$distro" != "ubuntu" ] && [ "$distro" != "debian" ] && error "This script only works on Ubuntu and Debian"

# check sudo installed
if ! command -v sudo &>/dev/null; then
    echo "sudo could not be found"
    ((EUID == 0)) && apt update && apt install -y sudo || echo "Please install sudo first" && exit 1
fi

if ((EUID != 0)); then
    echo "Granting root privileges for ""$(basename "$0")"
    if [ -t 1 ]; then
        sudo "$0" "$@"
    else
        exec 1>output_file
        gksu "$0" "$@"
    fi
    exit
fi

username=""
ssh_port=
ssh_authorized_keys=""
ipv6_dchp=false
shadowsocks_password=""
shadowsocks_port=
shadowsocks_obfs_host=
shadowsocks_config="/etc/shadowsocks-libev/config.json"
install_fish=false
install_neofetch=false
install_go=false
install_im=false

enable_bbr=false
enable_shadowsocks=false
enable_socat=false
enable_byobu=false
enable_backports=false
sudo_without_password=false

# Shadow-TLS related
install_shadow_tls=false
snell_port=
snell_psk=
shadow_tls_port=
shadow_tls_password=
shadow_tls_obfs_host=
snell_version=4
snell_config_file="/etc/snell/snell-server.conf"
shadow_tls_default_file="/etc/default/shadow-tls"

distro="$(lsb_release -is 2>/dev/null)"

POSITIONAL=()

while [ $# -gt 0 ]; do
    case "$1" in
    --ssh | --ssh-port)
        ssh_port="$2"
        shift 2
        ;;
    -f | --fish)
        install_fish=true
        shift
        ;;
    -bbr | --bbr)
        enable_bbr=true
        shift
        ;;
    -b | --backports)
        enable_backports=true
        shift
        ;;
    -so | --socat)
        enable_socat=true
        shift
        ;;
    -s | --shadowsocks)
        enable_shadowsocks=true
        shift
        ;;
    -ssp | --shadowsocks-password)
        shadowsocks_password="$2"
        shift 2
        ;;
    -ssP | --shadowsocks-port)
        shadowsocks_port="$2"
        shift 2
        ;;
    --shadowsocks-obfs-host)
        shadowsocks_obfs_host="$2"
        shift 2
        ;;
    -u | --user | --username)
        username="$2"
        shift 2
        ;;
    -ak | --authorized-keys)
        ssh_authorized_keys="$2"
        shift 2
        ;;
    -6 | --ipv6-dhcp)
        ipv6_dchp=true
        shift
        ;;
    -nf | --neofetch)
        install_neofetch=true
        shift
        ;;
    -g | --go)
        install_go=true
        shift
        ;;
    -im | --im)
        install_im=true
        shift
        ;;
    --sudo-without-password)
        sudo_without_password=true
        shift
        ;;
    --byobu | --enable-byobu)
        enable_byobu=true
        shift
        ;;
    -stls | --shadow-tls)
        install_shadow_tls=true
        shift
        ;;
    --shadow-tls-port)
        shadow_tls_port="$2"
        shift 2
        ;;
    --shadow-tls-password)
        shadow_tls_password="$2"
        shift 2
        ;;
    --snell-port)
        snell_port="$2"
        shift 2
        ;;
    --snell-psk)
        snell_psk="$2"
        shift 2
        ;;
    --shadow-tls-obfs)
        shadow_tls_obfs_host="$2"
        shift 2
        ;;
    *)
        POSITIONAL+=("$1")
        shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

[ "$enable_backports" = true ] && [ "$distro" == "debian" ] && {
    _enable_backports
}

apt update && apt upgrade -y
apt -y --no-install-recommends install byobu wget curl net-tools build-essential git vim tig jq dnsutils tig pwgen

[ "$install_fish" = true ] && {
    if ! _installed fish; then
        _install_fish "$distro"
    fi
}

[ "$install_neofetch" = true ] && _install_neofetch
[ "$install_go" = true ] && curl -sL install.lol/go | bash
[ "$install_im" = true ] && _install_im

[ "$enable_socat" = true ] && _enable_socat
[ "$enable_shadowsocks" = true ] && {
    [ -z "$shadowsocks_password" ] && {
        [ -f "$shadowsocks_config" ] && shadowsocks_password="$(grep 2>/dev/null <"$shadowsocks_config" -Eo "\"password\"\s*:\s*\"[^\"]+\"" | cut -d'"' -f4)"
        [ -z "$shadowsocks_password" ] && {
            shadowsocks_password="$(pwgen -ns 32 1 2>/dev/null)" ||
                shadowsocks_password="$(busybox pwgen -ns 32 1 2>/dev/null)" ||
                shadowsocks_password="$(openssl rand -base64 32 2>/dev/null)" ||
                shadowsocks_password="$(busybox mkpasswd -l 32 -C 16 2>/dev/null)" ||
                shadowsocks_password="$(tr -dc 'a-zA-Z0-9' </dev/urandom | head -c 32 2>/dev/null)"
        }
        [ -z "$shadowsocks_password" ] && error "Shadowsocks password is required with --shadowsocks, please re-run the script with --shadowsocks-password option"
    }

    [ -z "$shadowsocks_port" ] && {
        [ -f "$shadowsocks_config" ] && shadowsocks_port="$(grep 2>/dev/null <"$shadowsocks_config" -Eo "\"server_port\"\s*:\s*[0-9]+[^,]" | cut -d: -f2 | tr -d ' ')"
        while [ -z "$shadowsocks_port" ] || [ "$shadowsocks_port" = "$ssh_port" ]; do
            shadowsocks_port=$(shuf -i 10000-65535 -n 1 2>/dev/null) ||
                shadowsocks_port=$(awk -v min=10000 -v max=65535 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        done
        [ -z "$shadowsocks_port" ] && error "Shadowsocks port is required with --shadowsocks, please re-run the script with --shadowsocks-port option"
    }

    [ -z "$shadowsocks_obfs_host" ] && {
        [ -f "$shadowsocks_config" ] && shadowsocks_obfs_host="$(grep 2>/dev/null <"$shadowsocks_config" -Eo "obfs-host=.*[^,\"]" | cut -d'=' -f2)"
        [ -z "$shadowsocks_obfs_host" ] && {
            warn "shadowsocks obfs host is not set, will use gateway.icloud.com as default"
            shadowsocks_obfs_host="gateway.icloud.com"
        }
    }

    curl -sL install.lol/ss-libev | bash -s -- --password "$shadowsocks_password" --port "$shadowsocks_port" --obfs-host "$shadowsocks_obfs_host"
}

[ "$install_shadow_tls" = true ] && {
    [ -z "$snell_port" ] && {
        [ -f "$snell_config_file" ] && snell_port="$(grep 2>/dev/null <"$snell_config_file" -oE "listen = .*" | awk -F ':' '{print $NF}' | tr -d ' ')"
        while [ -z "$snell_port" ] || [ "$snell_port" = "$shadowsocks_port" ] || [ "$snell_port" = "$ssh_port" ]; do
            snell_port=$(shuf -i 10000-65535 -n 1 2>/dev/null) ||
                snell_port=$(awk -v min=10000 -v max=65535 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        done
        [ -z "$snell_port" ] && error "Snell port is required with --shadow-tls, please re-run the script with --snell-port option"
    }

    [ -z "$snell_psk" ] && {
        [ -f "$snell_config_file" ] && snell_psk="$(grep 2>/dev/null <"$snell_config_file" -oE "psk = .*" | awk -F '=' '{print $NF}' | tr -d ' ')"
        [ -z "$snell_psk" ] && {
            snell_psk="$(pwgen -ns 32 1 2>/dev/null)" ||
                snell_psk="$(uuidgen -r 2>/dev/null)" ||
                snell_psk="$(tr </dev/urandom -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 2>/dev/null)"
        }
        [ -z "$snell_psk" ] && error "Snell PSK is required with --shadow-tls, please re-run the script with --snell-psk option"
    }

    [ -z "$shadow_tls_password" ] && {
        [ -f "$shadow_tls_default_file" ] && shadow_tls_password=$(grep 2>/dev/null <"$shadow_tls_default_file" -oE "shadow_tls_password=.*" | awk -F '=' '{print $NF}' | tr -d ' ')
        [ -z "$shadow_tls_password" ] && {
            shadow_tls_password="$(pwgen -ns 32 1 2>/dev/null)" ||
                shadow_tls_password="$(uuidgen -r 2>/dev/null)" ||
                shadow_tls_password="$(tr </dev/urandom -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 2>/dev/null)"
        }
        [ -z "$shadow_tls_password" ] && error "Shadow TLS password is required with --shadow-tls, please re-run the script with --shadow-tls-password option"
    }

    [ -z "$shadow_tls_port" ] && {
        [ -f "$shadow_tls_default_file" ] && shadow_tls_port=$(grep 2>/dev/null <"$shadow_tls_default_file" -oE "shadow_tls_port=.*" | awk -F '=' '{print $NF}' | tr -d ' ')
        # should not use snell port
        while [ -z "$shadow_tls_port" ] || [ "$shadow_tls_port" = "$shadowsocks_port" ] || [ "$shadow_tls_port" = "$snell_port" ] || [ "$shadow_tls_port" = "$ssh_port" ]; do
            shadow_tls_port=$(shuf -i 10000-65535 -n 1 2>/dev/null) ||
                shadow_tls_port=$(awk -v min=10000 -v max=65535 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        done
        [ -z "$shadow_tls_port" ] && error "Shadow TLS port is required with --shadow-tls, please re-run the script with --shadow-tls-port option"
    }

    [ -z "$shadow_tls_obfs_host" ] && {
        [ -f "$snell_config_file" ] && shadow_tls_obfs_host="$(grep 2>/dev/null <"$snell_config_file" -oE "obfs-host = .*" | awk -F '=' '{print $NF}' | tr -d ' ')"
        [ -z "$shadow_tls_obfs_host" ] && [ -f "$shadow_tls_default_file" ] && {
            shadow_tls_obfs_host="$(grep 2>/dev/null <"$shadow_tls_default_file" -oE "obfs_host=.*" | awk -F '=' '{print $NF}' | tr -d ' ')"
        }
        [ -z "$shadow_tls_obfs_host" ] && {
            warn "Shadow TLS obfs host is not set, will use gateway.icloud.com as default"
            shadow_tls_obfs_host="gateway.icloud.com"
        }
    }

    [ -z "$snell_version" ] && {
        [ -f "$snell_config_file" ] && snell_version="$(grep 2>/dev/null <"$snell_config_file" -oE "version = .*" | awk -F '=' '{print $NF}' | tr -d ' ')"
        [ -z "$snell_version" ] && {
            warn "Snell version is not set, will use 4 as default"
            snell_version=4
        }
    }

    curl -sL install.lol/Surge/Snell/install | bash -s -- --snell-port "$snell_port" --snell-psk "$snell_psk" --snell-version "$snell_version" \
        --shadow-tls --shadow-tls-password "$shadow_tls_password" --shadow-tls-port "$shadow_tls_port" --obfs-host "$shadow_tls_obfs_host"
}

#enable bbr
[ "$enable_bbr" = true ] && _enable_bbr "$distro"
[ "$ipv6_dchp" = true ] && _enable_ipv6

[ -n "$ssh_port" ] && {
    sed -ri "s/^#?Port.*/Port $ssh_port/g" /etc/ssh/sshd_config
    # restart sshd
    systemctl restart sshd
}

if [ -n "$username" ]; then
    # create user
    _create_user "$username"
    # config ssh
    [ -n "$ssh_authorized_keys" ] && _config_ssh "$username" "$ssh_authorized_keys"
    # config fish
    _config_fish "$username"
    # config byobu
    [ "$enable_byobu" = true ] && _enable_byobu "$username"
    # config sudo
    _config_sudo "$username" "$sudo_without_password"
fi
