#!/bin/bash

# shellcheck disable=SC2120
function default_interface() {
    type="$1"
    [ -z "$type" ] && type="4"
    ip -"$type" route show default | awk '{print $5}' | head -n1
}

service_exists() {
    local n=$1
    if [ "$(systemctl list-units --all -t service --full --no-legend "$n.service" | cut -f1 -d' ' 2>/dev/null)" == "$n.service" ]; then
        return 0
    else
        return 1
    fi
}

POSITIONAL=()
port=
password=""
obfs_host=""
libsodium_version=""
libsodium_default_version=
mbedtls_version=""
mbedtls_default_version=
mbed_releases_url="https://api.github.com/repos/ARMmbed/mbedtls/releases"
libsodium_releases_url="https://api.github.com/repos/jedisct1/libsodium/releases"
systemd_service_file=/lib/systemd/system/shadowsocks-libev.service

obfs_hosts=(
    "microsoft.com"
    "apple.com"
    "gateway.messenger.live.com"
    "gateway.icloud.com"
)

while [ $# -gt 0 ]; do
    case "$1" in
    -P | --port)
        port="$2"
        shift 2
        ;;
    -p | --password)
        password="$2"
        shift 2
        ;;
    -o | --obfs-host)
        obfs_host="$2"
        shift 2
        ;;
    -lsv | --libsodium-version)
        libsodium_version="$2"
        shift 2
        ;;
    -mv | --mbedtls-version)
        mbedtls_version="$2"
        shift 2
        ;;
    *)
        POSITIONAL+=("$1")
        shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

[ -n "$libsodium_version" ] || {
    libsodium_version=$(curl -sL "$libsodium_releases_url" 2>/dev/null | grep "tag_name" | head -n 1 | cut -d '"' -f4 | cut -d'-' -f1)
}
[ -n "$mbedtls_version" ] || {
    mbedtls_version=$(curl -sL "$mbed_releases_url" 2>/dev/null | grep "tag_name" | grep 'v2.' | head -n 1 | cut -d '"' -f 4)
}

[ -z "$libsodium_version" ] && echo "use libsodium $libsodium_default_version" && libsodium_version="$libsodium_default_version"
[ -z "$mbedtls_version" ] && echo "use mbedtls $mbedtls_default_version" && mbedtls_version="$mbedtls_default_version"

wd=$(mktemp -t "ss-libev.XXXXXXXXXXXXXXXX" -d 2>/dev/null)

[ ! -d "$wd" ] && wd=/tmp/$(date +%s) && mkdir -p "$wd" 2>/dev/null
[ ! -d "$wd" ] && echo "failed to create working directory" && exit 1

pushd "$wd" >>/dev/null 2>&1 || exit

sudo apt -y update && DEBIAN_FRONTEND=noninteractive sudo apt -y --no-install-recommends install gettext build-essential autoconf libtool libpcre3-dev \
    asciidoc xmlto libev-dev libc-ares-dev automake libmbedtls-dev libsodium-dev pkg-config

# Installation of Libsodium
rm -rf "libsodium"
git clone https://github.com/jedisct1/libsodium.git "libsodium"
[ ! -d "libsodium" ] && echo "failed to clone libsodium" && exit 1
pushd "libsodium" >>/dev/null 2>&1 || exit
git checkout "$libsodium_version"
./autogen.sh
./configure --prefix=/usr && make
sudo make install
popd >>/dev/null 2>&1 || exit
sudo ldconfig

# Installation of MbedTLS
rm -rf "mbedtls"
git clone https://github.com/ARMmbed/mbedtls.git "mbedtls"
[ ! -d "mbedtls" ] && echo "failed to clone mbedtls" && exit 1
pushd "mbedtls" >>/dev/null 2>&1 || exit
git checkout "$mbedtls_version"
make SHARED=1 CFLAGS=-fPIC
sudo make DESTDIR=/usr install
popd >>/dev/null 2>&1 || exit
sudo ldconfig

rm -rf simple-obfs
git clone https://github.com/shadowsocks/simple-obfs.git
pushd simple-obfs >>/dev/null 2>&1 || exit
git submodule update --init --recursive
./autogen.sh
./configure --prefix=/usr && make
sudo make install
popd >>/dev/null 2>&1 || exit

rm -rf shadowsocks-libev
git clone https://github.com/shadowsocks/shadowsocks-libev.git
pushd shadowsocks-libev >>/dev/null 2>&1 || exit
git submodule update --init --recursive
./autogen.sh && ./configure --prefix=/usr && make
sudo make install
if [ ! -e "/etc/shadowsocks-libev/config.json" ]; then
    [ ! -d "/etc/shadowsocks-libev/" ] && sudo mkdir -p /etc/shadowsocks-libev/
    [ -z "$password" ] && {
        password="$(pwgen -ns 32 1 2>/dev/null)" ||
            password="$(busybox pwgen -ns 32 1 2>/dev/null)" ||
            password="$(openssl rand -base64 32 2>/dev/null)" ||
            password="$(busybox mkpasswd -l 32 -C 16 2>/dev/null)" ||
            password="$(tr -dc 'a-zA-Z0-9' </dev/urandom | head -c 32 2>/dev/null)"
    }
    [ -z "$port" ] && {
        port="$(shuf -i 10000-65535 -n 1 2>/dev/null)" ||
            port="$(awk -v min=10000 -v max=65535 'BEGIN{srand(); print int(min+rand()*(max-min+1))}' 2>/dev/null)"
    }

    [ -z "$obfs_host" ] && {
        warn "obfs-host is not specified, use random one"
        obfs_host=${obfs_hosts[$RANDOM % ${#obfs_hosts[@]}]}
    }

    cat <<EOF >config.json
{
        "server"      : ["::0","0.0.0.0"],
        "server_port" : ${port},
        "password"    : "${password}",
        "timeout"     : 300,
        "method"      : "chacha20-ietf-poly1305",
        "mode"        : "tcp_and_udp",
        "fast_open"   : true,
        "plugin"      : "obfs-server",
        "plugin_opts" : "obfs=http;obfs-host=${obfs_host}"
}
EOF
    sudo mv config.json /etc/shadowsocks-libev/
fi
sudo cp debian/shadowsocks-libev.default /etc/default/shadowsocks-libev
if ! service_exists shadowsocks-libev; then
    sudo cp debian/shadowsocks-libev.service "$systemd_service_file"
    sudo systemctl enable shadowsocks-libev.service
fi

# add restart on failure
if ! grep -q "Restart=on-failure" "$systemd_service_file"; then
    sudo sed -i 's/^\[Service\]$/[Service]\nRestart=on-failure\nRestartSec=5/' "$systemd_service_file"
    sudo systemctl enable shadowsocks-libev.service
fi

# fix start error when ipv6 is enabled
# get default interface
default_if=$(default_interface -6 2>/dev/null)
[ -n "$default_if" ] && {
    if ! grep -q "net.ipv6.conf.$default_if.accept_dad" /etc/sysctl.conf; then
        echo "net.ipv6.conf.$default_if.accept_dad = 0" | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p
    fi
}
sudo systemctl start shadowsocks-libev
popd >>/dev/null 2>&1 || exit
popd >>/dev/null 2>&1 || exit
