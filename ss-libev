#!/bin/bash

# this function is borrowed from https://stackoverflow.com/a/30948155
function _pwgen() {
	chars='!%^&-()_+='
	{ </dev/urandom LC_ALL=C grep -ao '[A-Za-z0-9]' \
		| head -n$((RANDOM % 8 + 9))
			echo ${chars:$((RANDOM % ${#chars})):1}   # Random special char.
	} | shuf | tr -d '\n'
}

# shellcheck disable=SC2120
function default_interface() {
    type="$1"
    [ -z "$type" ] && type="4"
    ip -"$type" route show default | awk '{print $5}' | head -n1
}

service_exists() {
    local n=$1
    if [[ $(systemctl list-units --all -t service --full --no-legend "$n.service" | cut -f1 -d' ' 2>/dev/null) == $n.service ]]; then
        return 0
    else
        return 1
    fi
}

POSITIONAL=()
password=""
libsodium_version=""
libsodium_default_version="1.0.18"
mbedtls_version=""
mbedtls_default_version="2.28.2"
mbed_releases_url="https://api.github.com/repos/ARMmbed/mbedtls/releases"
libsodium_releases_url="https://api.github.com/repos/jedisct1/libsodium/releases"
systemd_service_file=/lib/systemd/system/shadowsocks-libev.service

while [[ $# -gt 0 ]]; do
    case "$1" in
        -p | --password ) password="$2"; shift 2 ;;
        -lsv | --libsodium-version ) libsodium_version="$2"; shift 2 ;;
        -mv | --mbedtls-version ) mbedtls_version="$2"; shift 2 ;;
        * ) POSITIONAL+=("$1"); shift ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

[[ -n "$libsodium_version" ]] || {
    libsodium_version=$(curl -sL "$libsodium_releases_url" 2>/dev/null | grep "tag_name" | head -n 1 | cut -d '"' -f4 | cut -d'-' -f1)
}
[[ -n "$mbedtls_version" ]] || {
    mbedtls_version=$(curl -sL "$mbed_releases_url" 2>/dev/null | grep "tag_name" | grep 'v2.' | head -n 1 | cut -d '"' -f 4)
}

[[ -z "$libsodium_version" ]] && echo "use libsodium $libsodium_default_version" && libsodium_version="$libsodium_default_version"
[[ -z "$mbedtls_version" ]] && echo "use mbedtls $mbedtls_default_version" && mbedtls_version="$mbedtls_default_version"

wd=$(mktemp -t "ss-libev.XXXXXXXXXXXXXXXX" -d 2>/dev/null)

[[ -d "$wd" ]] || wd=/tmp/$(date +%s) && mkdir -p "$wd"
[[ ! -d "$wd" ]] && echo "failed to create working directory" && exit 1

pushd "$wd" >> /dev/null 2>&1 || exit

sudo apt -y update && DEBIAN_FRONTEND=noninteractive sudo apt -y --no-install-recommends install gettext build-essential autoconf libtool libpcre3-dev \
    asciidoc xmlto libev-dev libc-ares-dev automake libmbedtls-dev libsodium-dev pkg-config

# Installation of Libsodium
rm -rf "libsodium-$libsodium_version"
rm -rf "libsodium-$libsodium_version.tar.gz"
wget "https://download.libsodium.org/libsodium/releases/libsodium-$libsodium_version.tar.gz"
tar xvf "libsodium-$libsodium_version.tar.gz"
pushd "libsodium-$libsodium_version" >> /dev/null 2>&1 || exit
./configure --prefix=/usr && make
sudo make install
popd >> /dev/null 2>&1 || exit
sudo ldconfig

# Installation of MbedTLS
rm -rf "mbedtls"
git clone https://github.com/ARMmbed/mbedtls.git "mbedtls"
[[ ! -d "mbedtls" ]] && echo "failed to clone mbedtls" && exit 1
pushd "mbedtls" >> /dev/null 2>&1 || exit
git checkout "$mbedtls_version"
make SHARED=1 CFLAGS=-fPIC
sudo make DESTDIR=/usr install
popd >> /dev/null 2>&1 || exit
sudo ldconfig

rm -rf simple-obfs
git clone https://github.com/shadowsocks/simple-obfs.git
pushd simple-obfs >> /dev/null 2>&1 || exit
git submodule update --init --recursive
./autogen.sh
./configure --prefix=/usr && make
sudo make install
popd >> /dev/null 2>&1 || exit

rm -rf shadowsocks-libev
git clone https://github.com/shadowsocks/shadowsocks-libev.git
pushd shadowsocks-libev >> /dev/null 2>&1 || exit
git submodule update --init --recursive
./autogen.sh && ./configure --prefix=/usr && make
sudo make install
if [ ! -e "/etc/shadowsocks-libev/config.json" ]; then
    [[ ! -d "/etc/shadowsocks-libev/" ]] && sudo mkdir -p /etc/shadowsocks-libev/
    [[ -z "$password" ]] && password=$(_pwgen)
    cat << EOF > config.json
{
        "server"      : ["::0","0.0.0.0"],
        "server_port" : 15527,
        "password"    : "${password}",
        "timeout"     : 300,
        "method"      : "chacha20-ietf-poly1305",
        "mode"        : "tcp_and_udp",
        "fast_open"   : true,
        "plugin"      : "obfs-server",
        "plugin_opts" : "obfs=http;obfs-host=cloudfront.net"
}
EOF
    sudo mv config.json  /etc/shadowsocks-libev/
fi
sudo cp debian/shadowsocks-libev.default /etc/default/shadowsocks-libev
if ! service_exists shadowsocks-libev; then
    sudo cp debian/shadowsocks-libev.service "$systemd_service_file"
    # add restart on failure
    if ! grep -q "Restart=on-failure" "$systemd_service_file"; then
            sudo sed -i 's/^\[Service\]$/[Service]\nRestart=on-failure\nRestartSec=5/' "$systemd_service_file"
    fi
    sudo systemctl enable shadowsocks-libev.service
fi

# fix start error when ipv6 is enabled
# get default interface
default_if=$(default_interface -6 2>/dev/null)
[ -n "$default_if" ] && {
    if ! grep -q "net.ipv6.conf.$default_if.accept_dad" /etc/sysctl.conf; then
        echo "net.ipv6.conf.$default_if.accept_dad = 0" | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p
    fi
}
sudo systemctl start shadowsocks-libev
popd >> /dev/null 2>&1 || exit
popd >> /dev/null 2>&1 || exit
