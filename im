#!/usr/bin/env bash

lookbusy_base="http://www.devin.com/lookbusy/"

function add_cronjob() {
    username="$1"
    # all the other arguments are the command
    cron="${*:2}"

    # check if the user exists
    if ! id -u "$username" >/dev/null 2>&1; then
        echo "user $username does not exist"
        return 1
    fi

    cron_checksum=$(echo "$cron" | md5sum | cut -d' ' -f1)

    # check cron whether exists with the same checksum
    if crontab -u "$username" -l 2>/dev/null | grep -q "$cron_checksum"; then
        echo "command already exists"
        return 0
    fi

    # add the job to crontab
    (crontab -u "$username" -l 2>/dev/null; echo "$cron # $cron_checksum") | crontab -u "$username" -
}

function installed() {
    command -v "$1" >/dev/null 2>&1
}

function updateable() {
    apt-get update > /dev/null 2>&1
    available=$(apt list --upgradable 2>/dev/null | grep -c upgradable)
    [[ "$available" -gt 0 ]] || return 1
}

function updatable_without_kernel() {
    apt-get update > /dev/null 2>&1
    available=$(apt list --upgradable 2>/dev/null | grep -v linux-image | grep -c upgradable)
    [[ "$available" -gt 0 ]] || return 1
}

function kernal_updateable() {
    apt-get update > /dev/null 2>&1
    available=$(apt list --upgradable 2>/dev/null | grep upgradable | grep -c linux-image)
    [[ "$available" -gt 0 ]] || return 1
}

function remove_old_kernels() {
    old_kernels=$(dpkg -l "linux-"{image,headers}"-*" | awk '/^ii/{print $2}' | grep -E '[0-9]+\.[0-9]+\.[0-9]+' | grep -v "$(uname -r | cut -d- -f-2)")
    [[ -z "$old_kernels" ]] && echo "no old kernels to remove" && return 0
    for kernel in $old_kernels; do
        apt -y purge "$kernel"
    done
    apt -y autoremove && apt -y autoclean
}

function update() {
    echo "checking for updates"
    if kernal_updateable; then
        echo "kernal updateable, update and reboot the server"
        apt -y upgrade
        reboot
    elif updateable; then
        echo "update available, update the server"
        apt -y upgrade
        [[ -f "/var/run/reboot-required" ]] && echo "reboot required" && reboot
    fi
}

function upgrade() {
    current_version=$(lsb_release -r | awk '{print $2}')
    [[ "$current_version" == "22.04" ]] && echo "already on 22.04, no need to upgrade" && return 0
    echo "upgrading the server from $current_version to 22.04"
    [[ -f /etc/apt/apt.conf.d/local ]] && cp /etc/apt/apt.conf.d/local /etc/apt/apt.conf.d/local.bak
    echo 'DPkg::options { "--force-confdef"; "--force-confold"; }' > /etc/apt/apt.conf.d/local
    DEBIAN_FRONTEND=noninteractive /usr/bin/do-release-upgrade -d -f DistUpgradeViewNonInteractive
    [[ -f /etc/apt/apt.conf.d/local.bak ]] && cp /etc/apt/apt.conf.d/local.bak /etc/apt/apt.conf.d/local
    reboot
}

function update_ss() {
    curl -sL install.lol/ss-libev | bash -s --
}

function install_speedtest() {
    prefix=/usr/local
    manpath=$prefix/share/man/man5
    pkg_info_url='https://raw.githubusercontent.com/teamookla/homebrew-speedtest/master/speedtest.rb'
    pkg_version="$(curl -sL "$pkg_info_url" | grep 'version \".*\"' | cut -d'"' -f2)"
    [[ -z "$pkg_version" ]] && echo "failed to get the latest speedtest-cli versuib" && return 1
    pkg_url="https://install.speedtest.net/app/cli/ookla-speedtest-$pkg_version-linux-$(uname -m).tgz"
    pkg_url=${pkg_url//\\/}
    pkg_name=$(basename "$pkg_url")
    tmp_dir=$(mktemp -d -t speedtest-cli-XXXXXXXXXX 2>/dev/null)
    [[ -z "$tmp_dir" ]] && echo "failed to create a temp dir" && return 1
    target_pkg="$tmp_dir/$pkg_name"
    curl -sL "$pkg_url" -o "$target_pkg"
    [[ ! -f "$target_pkg" ]] && echo "failed to download the package" && return 1
    tar -xzf "$target_pkg" -C "$tmp_dir"
    [[ ! -f "$tmp_dir/speedtest" ]] && echo "failed to extract the package" && return 1
    mv "$tmp_dir/speedtest" $prefix/bin/speedtest
    chmod +x $prefix/bin/speedtest
    [[ ! -d "$manpath" ]] && mkdir -p "$manpath"
    [[ -d "$manpath" ]] && mv "$tmp_dir/speedtest.5" "$manpath"
    rm -rf "$tmp_dir"
    echo "speedtest-cli installed"
}

function run_speedtest() {
    if ! installed speedtest; then
        echo "speedtest-cli not installed, installing it"
        install_speedtest
    fi
    if ! installed speedtest; then
        echo "failed to install speedtest-cli"
        return 1
    fi

    echo "running speedtest"
    speedtest --accept-license --accept-gdpr --format=json-pretty
}

function install_pyenv() {
    username="$1"
    [[ -z "$username" ]] && echo "username is required when installing pyenv" && return 1
    su - "$username" -c "rm -rf ~/.pyenv && curl -sL https://pyenv.run | bash"
    su - "$username" -c "curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher && fisher install oh-my-fish/plugin-pyenv"
}

function self_update() {
    new_script=$(curl -sL install.lol/im)
    [[ -z "$new_script" ]] && echo "failed to get the latest script" && return 1
    script_path=$(readlink -f "$0")
    [[ ! -f "$script_path" ]] && echo "failed to get the script path" && return 1
    (sleep 1 && cat <<< "$new_script" > "$script_path" && chmod +x "$script_path" && echo "script updated, please run it again") &
    echo "im is updating, please wait"
}

function provision() {
    local user="$1"
    [[ -z "$user" ]] && echo "username is required when provisioning the server" && return 1
    curl -sL install.lol/provision | bash -s -- -u "$user" -s
}

function reset() {
    local user="$1"
    [[ -z "$user" ]] && echo "username is required when reseting the server" && return 1
    curl -sL install.lol/ubuntu | bash -s -- -u "$user"
}

function reboot() {
    echo "rebooting the server"
    /sbin/reboot
}

function do_all() {
    current_version=$(lsb_release -r | awk '{print $2}')
    if [[ "$current_version" == "22.04" ]]; then
        update
    else
        echo upgraading server from "$current_version" to 22.04
        update
        upgrade
    fi
}

function cleanup() {
    apt -y autoremove && apt -y autoclean
}

function netflix_test() {
    wd=$(mktemp -d -t netflix-XXXXXXXXXXXXXXXX 2>/dev/null)
    [[ -z "$wd" ]] && echo "failed to create a temp dir" && return 1
    pushd "$wd" > /dev/null 2>&1 || return 1
    rm -rf netflix-verify && git clone https://github.com/sjlleo/netflix-verify.git > /dev/null 2>&1 && \
        cd netflix-verify && go run main.go && cd .. && rm -rf netflix-verify
    popd > /dev/null 2>&1 || return 1
    rm -rf "$wd"
}

function midea_unlock_test() {
    wd=$(mktemp -d -t midea-XXXXXXXXXXXXXXXX 2>/dev/null)
    [[ -z "$wd" ]] && echo "failed to create a temp dir" && return 1
    pushd "$wd" > /dev/null 2>&1 || return 1
    # TODO: add midea unlock test
    popd > /dev/null 2>&1 || return 1
    rm -rf "$wd"
}

function install_edge_kernel() {
    current_version=$(lsb_release -r | awk '{print $2}')
    apt -y update 2>/dev/null
    edge_kernel=$(apt-cache search -q linux-image-generic-hwe-"$(lsb_release -r | awk '{print $2}')"-edge 2>/dev/null | cut -d' ' -f1)
    [[ -z "$edge_kernel" ]] && echo "failed to get the edge kernel" && return 1
    if dpkg -s "$edge_kernel" > /dev/null 2>&1; then
        echo "edge kernel already installed"
        return 0
    fi
    apt -y install "$edge_kernel" && echo "edge kernel installed"
    echo "rebooting the server"
    /sbin/reboot
}

function install_lookbusy() {
    remote_url=$(curl -sL $lookbusy_base | grep -oP 'href="\K[^"]+.tar.gz' | head -n 1 | sed 's/ //g')
    [[ -z "$remote_url" ]] && echo "failed to get the remote url" && return 1
    remote_version=$(echo "$remote_url" | grep -oP 'lookbusy-\K[^"]+.tar.gz' | sed 's/\.tar\.gz//g')
    [[ -z "$remote_version" ]] && echo "failed to get the remote version" && return 1
    local_version=$(lookbusy -V 2>/dev/null | grep -oP 'lookbusy ([0-9]+([.][0-9]+)+)' | awk '{print $2}')
    [[ -z "$local_version" ]] || [[ "$local_version" != "$remote_version" ]] && {
        tmp_dir=$(mktemp -d -t lookbusy-XXXXXXXXXXXXXXXX 2>/dev/null)
        [[ -z "$tmp_dir" ]] && echo "failed to create a temp dir" && return 1
        pushd "$tmp_dir" > /dev/null 2>&1 || return 1
        curl -sL "$lookbusy_base$remote_url" -o lookbusy.tar.gz || return 1
        tar -xvf lookbusy.tar.gz --strip-components=1 --exclude=.svn || return 1
        ./configure && make && make install
        popd > /dev/null 2>&1 || return 1
        rm -rf "$tmp_dir"
    }
}

function enable_lookbusy() {
    username="$1"
    [[ -z "$username" ]] && echo "username is required when enabling lookbusy" && return 1
    if ! installed lookbusy; then
        echo "lookbusy is not installed"
        echo "installing lookbusy"
        install_lookbusy
    fi
    if ! installed lookbusy; then
        echo "failed to install lookbusy"
        return 1
    fi

    # get 10% of the available memory
    mem=$(free -m | grep Mem | awk '{print $2}')
    mem=$((mem / 10))
    # create a cron job to run lookbusy every day from 02:30 GMT+8 with user $username
    add_cronjob "$username" "30 2 * * * timeout 4h lookbusy -c 10-20 -r curve -m $mem""mb -M 100"

    if ! installed speedtest; then
        echo "speedtest is not installed"
        echo "installing speedtest"
        install_speedtest
    fi
    if ! installed speedtest; then
        echo "failed to install speedtest"
        return 1
    fi
    # create a cron job to run speedtest every day at 02:00 GMT+8 with user $username
    add_cronjob "$username" "0 2 * * * speedtest --accept-license --accept-gdpr"
}

if ((EUID != 0)); then
	echo "Granting root privileges for ""$(basename "$0")"
	if [[ -t 1 ]]; then
		sudo "$0" "$@"
	else
		exec 1>output_file
		gksu "$0" "$@"
	fi
	exit
fi

_install_pyenv=false
_install_speedtest=false
_install_lookbusy=false
_update=false
_update_ss=false
_upgrade=false
_remove_old_kernels=false
_auto=false
_reset=false
_reboot=false
_provision=false
_self_update=false
_cleanup=false
_unlock_test=false
_netflix_test=false
_edge_kernel=false
_enable_lookbusy=false
_speedtest=false
username=""
_host=""

function usage() {
    echo "Usage: $(basename "$0") [options]"
    echo "Options:"
    echo "  -h, --help                    show this help message and exit"
    echo "  -ist, --install-speedtest,    install speedtest-cli"
    echo "  -ilb, --install-lookbusy,     install lookbusy"
    echo "  -ipe, --install-pyenv,        install pyenv"
    echo "  -c, --cleanup,                cleanup the server"
    echo "  -e, --edge-kernel,            install edge kernel"
    echo "  -l, --lookbusy,               enable lookbusy"
    echo "  -uu, --update,                update the server"
    echo "  -uuu, --ugrade,               upgrade the server if needed"
    echo "  -ui, --self-update,           update $(basename "$0")"
    echo "  -uss, --update-ss,            update shadowsocks-libev"
    echo "  -ro, --remove-old-kernels,    remove old kernels"
    echo "  -a, --auto,                   auto update or upgrade the server"
    echo "  -rr, --reset,                 reset the server, need -u to specify the username"
    echo "  -r, --reboot,                 reboot the server"
    echo "  -s, --midea-unlock-test,      stream media unlock test"
    echo "  -st, --speedtest,             run speedtest"
    echo "  -p, --provision,              provision the server, need -u to specify the username"
    echo "  -u, --username,               specify the username when reseting or provisioning the server"
    echo "  -nf, --netflix-test,          netflix unlock test"
}

POSITIONAL=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        -uu | --update ) _update=true; shift 1 ;;
        -uuu | --ugrade ) _upgrade=true; shift 1 ;;
        -ui | --self-update ) _self_update=true; shift 1 ;;
        -uss | --update-ss ) _update_ss=true; shift 1 ;;
        -ro | --remove-old-kernels ) _remove_old_kernels=true; shift 1 ;;
        -rr | --reset ) _reset=true; shift 1 ;;
        -r | --reboot ) _reboot=true; shift 1 ;;
        -s | --midea-unlock-test ) _unlock_test=true; shift 1 ;;
        -st | --speedtest ) _speedtest=true; shift 1 ;;
        -a | --auto ) _auto=true; shift 1 ;;
        -p | --provision ) _provision=true; shift 1 ;;
        -u | --username ) username="$2"; shift 2 ;;
        -c | --cleanup ) _cleanup=true; shift 1 ;;
        -e | --edge-kernel ) _edge_kernel=true; shift 1 ;;
        -l | --lookbusy ) _enable_lookbusy=true; shift 1 ;;
        -ist | --install-speedtest ) _install_speedtest=true; shift 1 ;;
        -ilb | --install-lookbusy ) _install_lookbusy=true; shift 1 ;;
        -ipe | --install-pyenv ) _install_pyenv=true; shift 1 ;;
        -nf | --netflix-test ) _netflix_test=true; shift 1 ;;
        * ) POSITIONAL+=("$1"); shift ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

action() {
    if [[ "$_update" == true ]]; then
        update
    elif [[ "$_upgrade" == true ]]; then
        upgrade
    elif [[ "$_update_ss" == true ]]; then
        update_ss
    elif [[ "$_self_update" == true ]]; then
        self_update
    elif [[ "$_remove_old_kernels" == true ]]; then
        remove_old_kernels
    elif [[ "$_reset" == true ]]; then
        reset "$username"
    elif [[ "$_reboot" == true ]]; then
        reboot
    elif [[ "$_provision" == true ]]; then
        provision "$username"
    elif [[ "$_cleanup" == true ]]; then
        cleanup
    elif [[ "$_install_speedtest" == true ]]; then
        install_speedtest
    elif [[ "$_speedtest" == true ]]; then
        run_speedtest
    elif [[ "$_install_lookbusy" == true ]]; then
        install_lookbusy
    elif [[ "$_install_pyenv" == true ]]; then
        [[ -z "$username" ]] && echo "username is required when installing pyenv" && return 1
        install_pyenv "$username"
    elif [[ "$_enable_lookbusy" == true ]]; then
        [[ -z "$username" ]] && echo "username is required when enabling lookbusy" && return 1
        enable_lookbusy "$username"
    elif [[ "$_unlock_test" == true ]]; then
        midea_unlock_test
    elif [[ "$_netflix_test" == true ]]; then
        netflix_test
    elif [[ "$_edge_kernel" == true ]]; then
        install_edge_kernel
    elif [[ "$_auto" == true ]]; then
        do_all
    else
        usage
    fi
}

action