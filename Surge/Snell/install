#!/usr/bin/env bash

snell_homepage="https://manual.nssurge.com/others/snell.html"
snell_bin="/usr/local/bin/snell-server"
snell_config_file="/etc/snell/snell-server.conf"
snell_config_dir="$(dirname "$snell_config_file")"
snell_service_file="/lib/systemd/system/snell-server.service"
shadow_tls_default_file="/etc/default/shadow-tls"
shadow_tls_service_file="/lib/systemd/system/shadow-tls.service"
shadow_tls_repo="ihciah/shadow-tls"
obfs_hosts=(
    "microsoft.com"
    "apple.com"
    "gateway.messenger.live.com"
    "gateway.icloud.com"
)

function installed() {
    command -v "$1" >/dev/null 2>&1
}

function warn() {
    echo -e "\033[1;33m${*}\033[0m"
}

function error() {
    echo -e "\033[1;31m${*}\033[0m"
    exit 1
}

service_exists() {
    local n=$1
    if [ "$(systemctl list-units --all -t service --full --no-legend "$n.service" | cut -f1 -d' ' 2>/dev/null)" == "$n.service" ]; then
        return 0
    else
        return 1
    fi
}

function download() {
    local url="$1"
    local target="$2"
    if [ -z "$target" ]; then
        target="$(basename "$url")"
    fi
    target_dir="$(dirname "$target")"
    if [ ! -d "$target_dir" ]; then
        mkdir -p "$target_dir"
    fi
    [ -f "$target" ] && rm -rf "$target"
    echo "Downloading $url to $target"
    curl --progress-bar -Lo "$target" "$url"
}

function download_snell() {
    # remove the trailing space
    installed_version="$(snell-server --version 2>&1 | grep -Eo "snell-server v[0-9\.]+" | cut -d ' ' -f 2 | sed 's/ *$//g')"
    # match last https://
    snell_download_url="$(curl -sL "$snell_homepage" 2>/dev/null | grep -oE "https://[^\"]+" | grep -E "linux-$arch\.zip" | head -n 1)"
    [ -z "$snell_download_url" ] && {
        error "Failed to get snell download url!"
        exit 1
    }
    snell_download_file="$(basename "$snell_download_url")"

    remove_version="$(echo "$snell_download_file" | grep -oE "v[0-9\.]+" | sed 's/ *$//g')"

    if [ "$installed_version" == "$remove_version" ]; then
        warn "Installed snell version is $installed_version, latest snell version is $remove_version, no need to update snell!"
        return
    fi

    download "$snell_download_url" "$snell_download_file"

    [ -f "$snell_download_file" ] || {
        error "Failed to download snell!"
    }

    unzip "$snell_download_file"

    [ -f "snell-server" ] || {
        error "Failed to extract snell!"
    }

    mv snell-server "$snell_bin"

    [ -f "$snell_bin" ] || {
        error "Failed to install snell!"
    }
}

function enable_snell() {
    download_snell
    # check etc dir
    [ -d "$snell_config_dir" ] || mkdir -p "$snell_config_dir" 2>/dev/null
    [ -d "$snell_config_dir" ] || {
        error "Failed to create snell config dir!"
    }

    cat >/etc/snell/snell-server.conf <<EOF
# snell-server config
# https://manual.nssurge.com/others/snell.html
[snell-server]
listen = ::0:${snell_port}
ipv6 = ${ipv6}
psk = ${snell_psk}
obfs = ${obfs}
obfs-host = ${obfs_host}
tfo = ${tfo}
version = ${snell_version}
EOF

    # add to service
    cat >"$snell_service_file" <<EOF
[Unit]
Description=Snell Proxy Service
After=network.target

[Service]
Type=simple
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE
DynamicUser=true
LimitNOFILE=32768
SyslogIdentifier=snell-server
Restart=on-failure
RestartSec=3
ExecStart=$snell_bin -c $snell_config_file

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable snell-server
    systemctl restart snell-server
}

function download_shadow_tls() {
    local arch=
    prefix="$1"
    [ -z "$prefix" ] && prefix="/usr/local"
    case "$(uname -m)" in
    x86_64)
        arch="x86_64"
        ;;
    aarch64)
        arch="aarch64"
        ;;
    armv7l)
        arch="armv7"
        ;;
    *)
        err "Unsupported architecture: $(uname -m)"
        ;;
    esac
    installed_version="$(shadow-tls -V 2>/dev/null | grep "shadow-tls" | cut -d ' ' -f 2)"
    [ -n "$installed_version" ] && installed_version="v$installed_version"
    latest_release="$(curl -sL https://api.github.com/repos/$shadow_tls_repo/releases/latest 2>/dev/null | grep "tag_name" | cut -d '"' -f 4)"
    if [ "$installed_version" == "$latest_release" ]; then
        warn "Installed shadow-tls version is $installed_version, latest shadow-tls version is $latest_release, no need to update shadow-tls!"
    fi
    [ -z "$latest_release" ] && err "Failed to get latest release of shadow-tls"
    download_url="$(curl -sL "https://api.github.com/repos/$shadow_tls_repo/releases/tags/$latest_release" | grep "browser_download_url" | grep "$arch-.*-linux" | cut -d '"' -f 4)"
    [ -z "$download_url" ] && err "Failed to get download url of shadow-tls"
    download "$download_url" "$prefix/bin/shadow-tls"
    chmod +x "$prefix/bin/shadow-tls"
    ! command -v shadow-tls >/dev/null 2>&1 && err "Failed to install shadow-tls"
}

function enable_shadow_tls() {
    download_shadow_tls /usr/local

    cat >"$shadow_tls_default_file" <<EOF
# shadow-tls config
# https://manual.nssurge.com/others/shadow-tls.html
shadow_tls_port=${shadow_tls_port}
shadow_tls_password=${shadow_tls_password}
snell_port=${snell_port}
obfs_host=${obfs_host}
EOF

    cat <<EOF >$shadow_tls_service_file
[Unit]
Description=Shadow-TLS Service
Documentation=man:sstls-server
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
EnvironmentFile=/etc/default/shadow-tls
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE
DynamicUser=true
LimitNOFILE=32768
SyslogIdentifier=shadow-tls
Restart=on-failure
RestartSec=5s
ExecStart=shadow-tls --v3 server --listen ::0:$shadow_tls_port --server 127.0.0.1:$snell_port --tls $obfs_host  --password $shadow_tls_password

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable shadow-tls
    systemctl restart shadow-tls
}

# run as root
[ $EUID -ne 0 ] && echo "Error: This script must be run as root!" && exit 1

snell_port=
ipv6=false
snell_psk=
obfs=http
obfs_host=
tfo=false
snell_version=
shadow_tls=
shadow_tls_password=

while [ $# -gt 0 ]; do
    key="$1"
    case $key in
    -sp | --snell-port)
        snell_port="$2"
        shift
        ;;
    -sv | --snell-version)
        snell_version="$2"
        shift
        ;;
    -6 | --ipv6)
        ipv6=true
        ;;
    -spk | --snell-psk)
        snell_psk="$2"
        shift
        ;;
    -o | --obfs)
        obfs="$2"
        [ "$obfs" != "http" ] && [ "$obfs" != "tls" ] && error "Invalid obfs: $obfs" && exit 1
        shift
        ;;
    -h | --obfs-host)
        obfs_host="$2"
        shift
        ;;
    -t | --tfo)
        tfo=true
        ;;
    -s | --shadow-tls)
        shadow_tls=true
        ;;
    -stp | --shadow-tls-port)
        shadow_tls_port="$2"
        shift
        ;;
    -spw | --shadow-tls-password)
        shadow_tls_password="$2"
        shift
        ;;
    *)
        warn "Unknown option: $key"
        ;;
    esac
    shift
done

[ -z "$snell_port" ] && {
    snell_port="$(grep 2>/dev/null <"$snell_config_file" -oE "listen = .*" | awk -F ':' '{print $NF}' | tr -d ' ')" ||
        snell_port=$(shuf -i 10000-65535 -n 1 2>/dev/null) ||
        snell_port=$(awk -v min=10000 -v max=65535 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
    [ -z "$snell_port" ] && error "Port is required, please specify it with --snell-port option"
}

[ -z "$snell_psk" ] && {
    snell_psk="$(grep 2>/dev/null <"$snell_config_file" -oE "psk = .*" | awk -F '=' '{print $NF}' | tr -d ' ')" ||
        snell_psk="$(pwgen -ns 32 1 2>/dev/null)" ||
        snell_psk="$(uuidgen -r 2>/dev/null)" ||
        snell_psk="$(tr </dev/urandom -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 2>/dev/null)"
    [ -z "$snell_psk" ] && error "PSK is required, please specify it with --snell-psk option"
}

[ -z "$obfs" ] && {
    obfs="$(grep 2>/dev/null <"$snell_config_file" -oE "obfs = .*" | awk -F '=' '{print $NF}' | tr -d ' ')"
    [ -z "$obfs" ] && {
        warn "Failed to get obfs from $snell_config_file, use http as default"
        obfs="http"
    }
}

[ -z "$obfs_host" ] && {
    obfs_host="$(grep 2>/dev/null <"$snell_config_file" -oE "obfs-host = .*" | awk -F '=' '{print $NF}' | tr -d ' ')"
}

[ -z "$snell_version" ] && {
    snell_version=$(grep 2>/dev/null <"$snell_config_file" -oE "version = .*" | awk -F '=' '{print $NF}' | tr -d ' ')
    [ -z "$snell_version" ] && {
        warn "Failed to get version from $snell_config_file, use 4 as default"
        snell_version="4"
    }
}

[ -z "$shadow_tls" ] && {
    # check shadow-tls service exists
    if service_exists shadow-tls; then
        shadow_tls=true
    else
        command -v shadow-tls >/dev/null 2>&1 && shadow_tls=true
    fi
}

[ "$shadow_tls" = true ] && {

    [ -z "$shadow_tls_password" ] && {
        shadow_tls_password=$(grep 2>/dev/null <"$shadow_tls_default_file" -oE "shadow_tls_password=.*" | awk -F '=' '{print $NF}' | tr -d ' ') ||
            shadow_tls_password="$(pwgen -ns 32 1 2>/dev/null)" ||
            shadow_tls_password="$(uuidgen -r 2>/dev/null)" ||
            shadow_tls_password="$(tr </dev/urandom -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 2>/dev/null)"
        [ -z "$shadow_tls_password" ] && error "Shadow-TLS password is required when shadow-tls is enabled"
    }

    [ -z "$shadow_tls_port" ] && {
        shadow_tls_port=$(grep 2>/dev/null <"$shadow_tls_default_file" -oE "shadow_tls_port=.*" | awk -F '=' '{print $NF}' | tr -d ' ')
        # should not use snell port
        while [ -z "$shadow_tls_port" ] || [ "$shadow_tls_port" -eq "$snell_port" ]; do
            shadow_tls_port=$(shuf -i 10000-65535 -n 1 2>/dev/null) ||
                shadow_tls_port=$(awk -v min=10000 -v max=65535 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        done
        [ -z "$shadow_tls_port" ] && error "Shadow-TLS port is required when shadow-tls is enabled" && exit 1
    }
    [ "$obfs" != "tls" ] && {
        warn "Shadow-TLS is enabled but obfs is not tls, forcing obfs to tls"
        obfs="tls"
    }

    [ -z "$obfs_host" ] && {
        obfs_host="$(grep 2>/dev/null <"$shadow_tls_default_file" -oE "obfs_host=.*" | awk -F '=' '{print $NF}' | tr -d ' ')"
    }
}

[ -z "$obfs_host" ] && {
    warn "No obfs-host specified, use random one"
    obfs_host=${obfs_hosts[$RANDOM % ${#obfs_hosts[@]}]}
}

arch=""
case $(uname -m) in
i386 | i686) arch="i386" ;;
x86_64) arch="amd64" ;;
aarch64 | arm64 | armv8) arch="aarch64" ;;
armv7* | armv6*) arch="armv7l" ;;
*) error "Unsupported architecture: $(uname -m)" && exit 1 ;;
esac

wd=$(mktemp -t "snell.XXXXXXXXXXXXXXXX" -d 2>/dev/null)

[ ! -d "$wd" ] && wd=/tmp/snell-$(date +%s) && mkdir -p "$wd" 2>/dev/null
[ ! -d "$wd" ] && echo "failed to create working directory" && exit 1

if installed apt || installed apt-get; then
    apt-get update
    apt-get install -y wget curl unzip
elif installed yum; then
    yum install -y wget curl unzip
elif installed pacman; then
    pacman -Sy --noconfirm wget curl unzip
elif installed apk; then
    apk update
    apk add --no-cache -y wget curl unzip
fi

pushd "$wd" >>/dev/null 2>&1 || exit
warn "####################################################################"
warn "Snell is a fast proxy tunnel that helps you bypass firewalls"
warn "Snell version:                             ${snell_version}"
warn "Snell port:                                ${snell_port}"
warn "Snell PSK:                                 ${snell_psk}"
warn "Snell obfs:                                ${obfs}"
warn "Snell obfs-host:                           ${obfs_host}"
warn "Shadow-TLS is enabled:                     ${shadow_tls}"
[ "$shadow_tls" = true ] && {
    warn "Shadow-TLS port:                           ${shadow_tls_port}"
    warn "Shadow-TLS password:                       ${shadow_tls_password}"
}
warn "####################################################################"
enable_snell
[ "$shadow_tls" = true ] && enable_shadow_tls
popd >>/dev/null 2>&1 || exit

rm -rf "$wd"
